akka {
  extensions = [
    akka.persistence.Persistence,
    akka.rollingupdate.kubernetes.PodDeletionCost,
    akka.rollingupdate.kubernetes.AppVersionRevision
  ]

  actor {
    provider = "cluster"
  }
  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      hostname = ${?KUBERNETES_POD_IP}
      port = 25520
    }
    
    # See https://doc.akka.io/docs/akka/current/remoting-artery.html#remote-configuration-nat-artery
    # We are not really using this but will let it configured in case we need in the future. These are dummy values
    bind {
      hostname = "127.0.0.1"
      # IMPORTANT: This is the IP that will be used to bind the port. It should be the same as the one used in the canonical hostname
      # If not it breaks the TCP connection used when the Akka Cluster is forming in Kubernetes
      hostname = ${?KUBERNETES_POD_IP}
      bind.port = 25520
    }
  }

  cluster {
    seed-nodes = [
      "akka://game-system@127.0.0.1:25520",
      "akka://game-system@127.0.0.1:25521"]
    
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    coordinated-shutdown.exit-jvm = on
  }

  persistence {
    state {
      plugin = "jdbc-durable-state-store"
    }
  }

  management {
    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
      }
    }
  }
}

jdbc-durable-state-store {
  slick = ${slick}
}

slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    host = "localhost"
    host = ${?DB_HOST}
    url = "jdbc:postgresql://"${slick.db.host}":5432/akka?reWriteBatchedInserts=true"
    user = "akka"
    password = "akka"
    driver = "org.postgresql.Driver"
    numThreads = 5
    maxConnections = 5
    minConnections = 1
  }
}

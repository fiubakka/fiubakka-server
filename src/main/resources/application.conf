akka {
  extensions = [
    akka.persistence.Persistence,
    akka.rollingupdate.kubernetes.PodDeletionCost,
    akka.rollingupdate.kubernetes.AppVersionRevision
  ]

  actor {
    provider = "cluster"
  }
  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      hostname = ${?KUBERNETES_POD_IP}
      port = 25520
    }
    
    # See https://doc.akka.io/docs/akka/current/remoting-artery.html#remote-configuration-nat-artery
    # We are not really using this but will let it configured in case we need in the future. These are dummy values
    bind {
      hostname = "127.0.0.1"
      # IMPORTANT: This is the IP that will be used to bind the port. It should be the same as the one used in the canonical hostname
      # If not it breaks the TCP connection used when the Akka Cluster is forming in Kubernetes
      hostname = ${?KUBERNETES_POD_IP}
      port = 25520
    }
  }

  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    coordinated-shutdown.exit-jvm = on
  }

  persistence {
    state {
      plugin = "jdbc-durable-state-store"
    }
  }

  management {
    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
      }
    }
  }

  # See https://github.com/lightbend/config/issues/356
  # Basically we can't use env variables inside child configs, so we need to use this workaround
  kafka-common-config {
    kafka-clients {
      bootstrap.servers = "127.0.0.1:9094"
      bootstrap.servers = ${?KAFKA_BOOTSTRAP_SERVERS}
    }
  }

  kafka-consumer: ${akka.kafka.consumer} ${akka.kafka-common-config} {}

  kafka-producer: ${akka.kafka.producer} ${akka.kafka-common-config} {}
}

jdbc-durable-state-store {
  slick = ${slick}
}

slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    host = "localhost"
    host = ${?DB_HOST}
    url = "jdbc:postgresql://"${slick.db.host}":5432/akka?reWriteBatchedInserts=true"
    user = "akka"
    password = "akka"
    driver = "org.postgresql.Driver"
    numThreads = 5
    maxConnections = 5
    minConnections = 1
  }
}

player-accepter {
  port = 9090
  port = ${?PLAYER_ACCEPTER_PORT}
}

cinnamon {
  akka {
    actors {
      "/user/*" {
        report-by = instance
      }

      "sharded-group" {
        report-by = instance
        includes = ["/system/sharding/*"]
        excludes = ["akka.cluster.sharding.Shard"]
      }
    }

    persistence.entities {
      "sharded:?" {
        report-by = group
      }
    }

    cluster {
      domain-events = on
      member-events = on
      node-status = on
      singleton-events = on
      shard-region-info = on
      node-metrics = on
      split-brain-resolver-events = on
    }

    ask-pattern.actors {
      "akka.cluster.sharding.ShardRegion" {
        report-by = instance
      }
    }
  }

  prometheus {
    exporters += http-server
  }
}
